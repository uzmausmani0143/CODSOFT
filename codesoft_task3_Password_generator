import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import random
import string

def generate_password(length, complexity, include_lower, include_upper, include_digits, include_special):
    characters = ""
    if include_lower:
        characters += string.ascii_lowercase
    if include_upper:
        characters += string.ascii_uppercase
    if include_digits:
        characters += string.digits
    if include_special:
        characters += string.punctuation

    if not characters:
        raise ValueError("At least one character type must be selected.")

    password = ''.join(random.choice(characters) for _ in range(length))
    return password

def generate_button_click():
    try:
        length = int(length_entry.get())
        if length <= 0:
            raise ValueError("Length must be a positive integer.")
        
        complexity = complexity_var.get()
        include_lower = include_lower_var.get()
        include_upper = include_upper_var.get()
        include_digits = include_digits_var.get()
        include_special = include_special_var.get()

        password = generate_password(length, complexity, include_lower, include_upper, include_digits, include_special)
        result_label.config(text=f"Generated Password: {password}")
    except ValueError as e:
        messagebox.showerror("Error", e)

# Create main window
root = tk.Tk()
root.title("Password Generator")
root.geometry("400x400")  # Set the dimensions (width x height)
root.maxsize(600,400)
root.configure(bg='#efcfe3')  # Set background color violet

# Add style
style = ttk.Style()
style.configure('TLabel', font=('Helvetica', 14),foreground='black')
style.configure('TCheckbutton', font=('Helvetica', 14), foreground='black')  # Green text for checkboxes
style.configure('TButton', font=('Helvetica', 14), foreground='blue', background='#4CAF50') # green
style.map('TButton', foreground=[('active', 'green'), ('pressed', 'green')], background=[('active', 'purple'), ('pressed', 'crimson')])  # Darker Green on Click

# Length Label and Entry
length_label = ttk.Label(root, text="Desired Length:",anchor='center')
length_label.grid(row=0, column=0, padx=10, pady=10)
length_entry = ttk.Entry(root)
length_entry.grid(row=0, column=1, padx=10, pady=10)

# Complexity Label and Combobox
complexity_label = ttk.Label(root, text="Complexity Level:")
complexity_label.grid(row=1, column=0, padx=10, pady=10)
complexity_var = tk.StringVar(root)
complexity_var.set("normal")
complexity_combobox = ttk.Combobox(root, textvariable=complexity_var, values=["weak", "normal", "strong"])
complexity_combobox.grid(row=1, column=1, padx=10, pady=10)

# Checkboxes for character types
include_lower_var = tk.BooleanVar()
include_lower_checkbox = ttk.Checkbutton(root, text="Include Lowercase", variable=include_lower_var)
include_lower_checkbox.grid(row=3, column=0, columnspan=2, padx=10, pady=5, sticky='w')

include_upper_var = tk.BooleanVar()
include_upper_checkbox = ttk.Checkbutton(root, text="Include Uppercase", variable=include_upper_var)
include_upper_checkbox.grid(row=4, column=0, columnspan=2, padx=10, pady=5, sticky='w')

include_digits_var = tk.BooleanVar()
include_digits_checkbox = ttk.Checkbutton(root, text="Include Digits", variable=include_digits_var)
include_digits_checkbox.grid(row=5, column=0, columnspan=2, padx=10, pady=5, sticky='w')

include_special_var = tk.BooleanVar()
include_special_checkbox = ttk.Checkbutton(root, text="Include Special Characters", variable=include_special_var)
include_special_checkbox.grid(row=6, column=0, columnspan=2, padx=10, pady=5, sticky='w')

# Generate Button
# generate_button = ttk.Button(root, text="Generate Password", command=generate_button_click, foreground='black')
# generate_button.grid(row=2, column=0, columnspan=2, pady=20)

# Custom colors applied here
generate_button = ttk.Button(root, text="Generate Password", command=generate_button_click)
generate_button.grid(row=2, column=0, columnspan=2, pady=20)

# Result Label
result_label = ttk.Label(root, text="", font=('Helvetica', 12), foreground='green',background='#f0f0f0',anchor='center')
result_label.grid(row=7, column=0, columnspan=2, padx=10, pady=10)  # Changed the row to 7

# Start GUI
root.mainloop()
